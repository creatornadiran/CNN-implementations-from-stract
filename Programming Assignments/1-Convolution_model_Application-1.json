{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convolutional Neural Networks: Application\n",
    "\n",
    "Welcome to Course 4's second assignment! In this notebook, you will:\n",
    "\n",
    "- Create a mood classifer using the TF Keras Sequential API\n",
    "- Build a ConvNet to identify sign language digits using the TF Keras Functional API\n",
    "\n",
    "**After this assignment you will be able to:**\n",
    "\n",
    "- Build and train a ConvNet in TensorFlow for a __binary__ classification problem\n",
    "- Build and train a ConvNet in TensorFlow for a __multiclass__ classification problem\n",
    "- Explain different use cases for the Sequential and Functional APIs\n",
    "\n",
    "To complete this assignment, you should already be familiar with TensorFlow. If you are not, please refer back to the **TensorFlow Tutorial** of the third week of Course 2 (\"**Improving deep neural networks**\")."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Table of Contents\n",
    "\n",
    "- [1 - Packages](#1)\n",
    "    - [1.1 - Load the Data and Split the Data into Train/Test Sets](#1-1)\n",
    "- [2 - Layers in TF Keras](#2)\n",
    "- [3 - The Sequential API](#3)\n",
    "    - [3.1 - Create the Sequential Model](#3-1)\n",
    "        - [Exercise 1 - happyModel](#ex-1)\n",
    "    - [3.2 - Train and Evaluate the Model](#3-2)\n",
    "- [4 - The Functional API](#4)\n",
    "    - [4.1 - Load the SIGNS Dataset](#4-1)\n",
    "    - [4.2 - Split the Data into Train/Test Sets](#4-2)\n",
    "    - [4.3 - Forward Propagation](#4-3)\n",
    "        - [Exercise 2 - convolutional_model](#ex-2)\n",
    "    - [4.4 - Train the Model](#4-4)\n",
    "- [5 - History Object](#5)\n",
    "- [6 - Bibliography](#6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='1'></a>\n",
    "## 1 - Packages\n",
    "\n",
    "As usual, begin by loading in the packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import h5py\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import imread\n",
    "import scipy\n",
    "from PIL import Image\n",
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "import tensorflow.keras.layers as tfl\n",
    "from tensorflow.python.framework import ops\n",
    "from cnn_utils import *\n",
    "from test_utils import summary, comparator\n",
    "\n",
    "%matplotlib inline\n",
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='1-1'></a>\n",
    "### 1.1 - Load the Data and Split the Data into Train/Test Sets\n",
    "\n",
    "You'll be using the Happy House dataset for this part of the assignment, which contains images of peoples' faces. Your task will be to build a ConvNet that determines whether the people in the images are smiling or not -- because they only get to enter the house if they're smiling!  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of training examples = 600\n",
      "number of test examples = 150\n",
      "X_train shape: (600, 64, 64, 3)\n",
      "Y_train shape: (600, 1)\n",
      "X_test shape: (150, 64, 64, 3)\n",
      "Y_test shape: (150, 1)\n"
     ]
    }
   ],
   "source": [
    "X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_happy_dataset()\n",
    "\n",
    "# Normalize image vectors\n",
    "X_train = X_train_orig/255.\n",
    "X_test = X_test_orig/255.\n",
    "\n",
    "# Reshape\n",
    "Y_train = Y_train_orig.T\n",
    "Y_test = Y_test_orig.T\n",
    "\n",
    "print (\"number of training examples = \" + str(X_train.shape[0]))\n",
    "print (\"number of test examples = \" + str(X_test.shape[0]))\n",
    "print (\"X_train shape: \" + str(X_train.shape))\n",
    "print (\"Y_train shape: \" + str(Y_train.shape))\n",
    "print (\"X_test shape: \" + str(X_test.shape))\n",
    "print (\"Y_test shape: \" + str(Y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can display the images contained in the dataset. Images are **64x64** pixels in RGB format (3 channels)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "index = 124\n",
    "plt.imshow(X_train_orig[index]) #display sample training image\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='2'></a>\n",
    "## 2 - Layers in TF Keras \n",
    "\n",
    "In the previous assignment, you created layers manually in numpy. In TF Keras, you don't have to write code directly to create layers. Rather, TF Keras has pre-defined layers you can use. \n",
    "\n",
    "When you create a layer in TF Keras, you are creating a function that takes some input and transforms it into an output you can reuse later. Nice and easy! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='3'></a>\n",
    "## 3 - The Sequential API\n",
    "\n",
    "In the previous assignment, you built helper functions using `numpy` to understand the mechanics behind convolutional neural networks. Most practical applications of deep learning today are built using programming frameworks, which have many built-in functions you can simply call. Keras is a high-level abstraction built on top of TensorFlow, which allows for even more simplified and optimized model creation and training. \n",
    "\n",
    "For the first part of this assignment, you'll create a model using TF Keras' Sequential API, which allows you to build layer by layer, and is ideal for building models where each layer has **exactly one** input tensor and **one** output tensor. \n",
    "\n",
    "As you'll see, using the Sequential API is simple and straightforward, but is only appropriate for simpler, more straightforward tasks. Later in this notebook you'll spend some time building with a more flexible, powerful alternative: the Functional API. \n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='3-1'></a>\n",
    "### 3.1 - Create the Sequential Model\n",
    "\n",
    "As mentioned earlier, the TensorFlow Keras Sequential API can be used to build simple models with layer operations that proceed in a sequential order. \n",
    "\n",
    "You can also add layers incrementally to a Sequential model with the `.add()` method, or remove them using the `.pop()` method, much like you would in a regular Python list.\n",
    "\n",
    "Actually, you can think of a Sequential model as behaving like a list of layers. Like Python lists, Sequential layers are ordered, and the order in which they are specified matters.  If your model is non-linear or contains layers with multiple inputs or outputs, a Sequential model wouldn't be the right choice!\n",
    "\n",
    "For any layer construction in Keras, you'll need to specify the input shape in advance. This is because in Keras, the shape of the weights is based on the shape of the inputs. The weights are only created when the model first sees some input data. Sequential models can be created by passing a list of layers to the Sequential constructor, like you will do in the next assignment.\n",
    "\n",
    "<a name='ex-1'></a>\n",
    "### Exercise 1 - happyModel\n",
    "\n",
    "Implement the `happyModel` function below to build the following model: `ZEROPAD2D -> CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> FLATTEN -> DENSE`. Take help from [tf.keras.layers](https://www.tensorflow.org/api_docs/python/tf/keras/layers) \n",
    "\n",
    "Also, plug in the following parameters for all the steps:\n",
    "\n",
    " - [ZeroPadding2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/ZeroPadding2D): padding 3, input shape 64 x 64 x 3\n",
    " - [Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D): Use 32 7x7 filters, stride 1\n",
    " - [BatchNormalization](https://www.tensorflow.org/api_docs/python/tf/keras/layers/BatchNormalization): for axis 3\n",
    " - [ReLU](https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU)\n",
    " - [MaxPool2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D): Using default parameters\n",
    " - [Flatten](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Flatten) the previous output.\n",
    " - Fully-connected ([Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)) layer: Apply a fully connected layer with 1 neuron and a sigmoid activation. \n",
    " \n",
    " \n",
    " **Hint:**\n",
    " \n",
    " Use **tfl** as shorthand for **tensorflow.keras.layers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "95d28b191f257bdd5b70c7b8952559d5",
     "grade": false,
     "grade_id": "cell-0e56d3fc28b69aec",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: happyModel\n",
    "\n",
    "def happyModel():\n",
    "    \"\"\"\n",
    "    Implements the forward propagation for the binary classification model:\n",
    "    ZEROPAD2D -> CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> FLATTEN -> DENSE\n",
    "    \n",
    "    Note that for simplicity and grading purposes, you'll hard-code all the values\n",
    "    such as the stride and kernel (filter) sizes. \n",
    "    Normally, functions should take these values as function parameters.\n",
    "    \n",
    "    Arguments:\n",
    "    None\n",
    "\n",
    "    Returns:\n",
    "    model -- TF Keras model (object containing the information for the entire training process) \n",
    "    \"\"\"\n",
    "    model = tf.keras.Sequential([\n",
    "        tf.keras.layers.ZeroPadding2D(3, input_shape=(64,64,3)),\n",
    "        tf.keras.layers.Conv2D(32,7,strides=(1,1)),\n",
    "        tf.keras.layers.BatchNormalization(axis=3),\n",
    "        tf.keras.layers.ReLU(),\n",
    "        tf.keras.layers.MaxPooling2D(),\n",
    "        tf.keras.layers.Flatten(),\n",
    "        tf.keras.layers.Dense(1, activation = \"sigmoid\"),\n",
    "        ])\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8d3575c950e2e78149be2d05d671c80d",
     "grade": true,
     "grade_id": "cell-e3e1046e5c33d775",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ZeroPadding2D', (None, 70, 70, 3), 0, ((3, 3), (3, 3))]\n",
      "['Conv2D', (None, 64, 64, 32), 4736, 'valid', 'linear', 'GlorotUniform']\n",
      "['BatchNormalization', (None, 64, 64, 32), 128]\n",
      "['ReLU', (None, 64, 64, 32), 0]\n",
      "['MaxPooling2D', (None, 32, 32, 32), 0, (2, 2), (2, 2), 'valid']\n",
      "['Flatten', (None, 32768), 0]\n",
      "['Dense', (None, 1), 32769, 'sigmoid']\n",
      "\u001b[32mAll tests passed!\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "happy_model = happyModel()\n",
    "# Print a summary for each layer\n",
    "for layer in summary(happy_model):\n",
    "    print(layer)\n",
    "    \n",
    "output = [['ZeroPadding2D', (None, 70, 70, 3), 0, ((3, 3), (3, 3))],\n",
    "            ['Conv2D', (None, 64, 64, 32), 4736, 'valid', 'linear', 'GlorotUniform'],\n",
    "            ['BatchNormalization', (None, 64, 64, 32), 128],\n",
    "            ['ReLU', (None, 64, 64, 32), 0],\n",
    "            ['MaxPooling2D', (None, 32, 32, 32), 0, (2, 2), (2, 2), 'valid'],\n",
    "            ['Flatten', (None, 32768), 0],\n",
    "            ['Dense', (None, 1), 32769, 'sigmoid']]\n",
    "    \n",
    "comparator(summary(happy_model), output)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that your model is created, you can compile it for training with an optimizer and loss of your choice. When the string `accuracy` is specified as a metric, the type of accuracy used will be automatically converted based on the loss function used. This is one of the many optimizations built into TensorFlow that make your life easier! If you'd like to read more on how the compiler operates, check the docs [here](https://www.tensorflow.org/api_docs/python/tf/keras/Model#compile)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "happy_model.compile(optimizer='adam',\n",
    "                   loss='binary_crossentropy',\n",
    "                   metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's time to check your model's parameters with the `.summary()` method. This will display the types of layers you have, the shape of the outputs, and how many parameters are in each layer. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "zero_padding2d (ZeroPadding2 (None, 70, 70, 3)         0         \n",
      "_________________________________________________________________\n",
      "conv2d (Conv2D)              (None, 64, 64, 32)        4736      \n",
      "_________________________________________________________________\n",
      "batch_normalization (BatchNo (None, 64, 64, 32)        128       \n",
      "_________________________________________________________________\n",
      "re_lu (ReLU)                 (None, 64, 64, 32)        0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 32, 32, 32)        0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 32768)             0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 1)                 32769     \n",
      "=================================================================\n",
      "Total params: 37,633\n",
      "Trainable params: 37,569\n",
      "Non-trainable params: 64\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "happy_model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='3-2'></a>\n",
    "### 3.2 - Train and Evaluate the Model\n",
    "\n",
    "After creating the model, compiling it with your choice of optimizer and loss function, and doing a sanity check on its contents, you are now ready to build! \n",
    "\n",
    "Simply call `.fit()` to train. That's it! No need for mini-batching, saving, or complex backpropagation computations. That's all been done for you, as you're using a TensorFlow dataset with the batches specified already. You do have the option to specify epoch number or minibatch size if you like (for example, in the case of an un-batched dataset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "38/38 [==============================] - 4s 92ms/step - loss: 0.8545 - accuracy: 0.7133\n",
      "Epoch 2/10\n",
      "38/38 [==============================] - 3s 87ms/step - loss: 0.5873 - accuracy: 0.8083\n",
      "Epoch 3/10\n",
      "38/38 [==============================] - 3s 87ms/step - loss: 0.1597 - accuracy: 0.9383\n",
      "Epoch 4/10\n",
      "38/38 [==============================] - 3s 87ms/step - loss: 0.2909 - accuracy: 0.9050\n",
      "Epoch 5/10\n",
      "38/38 [==============================] - 3s 89ms/step - loss: 0.1055 - accuracy: 0.9600\n",
      "Epoch 6/10\n",
      "38/38 [==============================] - 3s 89ms/step - loss: 0.0803 - accuracy: 0.9683\n",
      "Epoch 7/10\n",
      "38/38 [==============================] - 3s 89ms/step - loss: 0.1507 - accuracy: 0.9450\n",
      "Epoch 8/10\n",
      "38/38 [==============================] - 3s 87ms/step - loss: 0.0755 - accuracy: 0.9733\n",
      "Epoch 9/10\n",
      "38/38 [==============================] - 3s 87ms/step - loss: 0.0746 - accuracy: 0.9767\n",
      "Epoch 10/10\n",
      "38/38 [==============================] - 3s 89ms/step - loss: 0.0882 - accuracy: 0.9633\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7f6c3a5572d0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "happy_model.fit(X_train, Y_train, epochs=10, batch_size=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After that completes, just use `.evaluate()` to evaluate against your test set. This function will print the value of the loss function and the performance metrics specified during the compilation of the model. In this case, the `binary_crossentropy` and the `accuracy` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 34ms/step - loss: 0.1826 - accuracy: 0.9333\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.18260616064071655, 0.9333333373069763]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "happy_model.evaluate(X_test, Y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Easy, right? But what if you need to build a model with shared layers, branches, or multiple inputs and outputs? This is where Sequential, with its beautifully simple yet limited functionality, won't be able to help you. \n",
    "\n",
    "Next up: Enter the Functional API, your slightly more complex, highly flexible friend.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4'></a>\n",
    "## 4 - The Functional API"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to the second half of the assignment, where you'll use Keras' flexible [Functional API](https://www.tensorflow.org/guide/keras/functional) to build a ConvNet that can differentiate between 6 sign language digits. \n",
    "\n",
    "The Functional API can handle models with non-linear topology, shared layers, as well as layers with multiple inputs or outputs. Imagine that, where the Sequential API requires the model to move in a linear fashion through its layers, the Functional API allows much more flexibility. Where Sequential is a straight line, a Functional model is a graph, where the nodes of the layers can connect in many more ways than one. \n",
    "\n",
    "In the visual example below, the one possible direction of the movement Sequential model is shown in contrast to a skip connection, which is just one of the many ways a Functional model can be constructed. A skip connection, as you might have guessed, skips some layer in the network and feeds the output to a later layer in the network. Don't worry, you'll be spending more time with skip connections very soon! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"images/seq_vs_func.png\" style=\"width:350px;height:200px;\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4-1'></a>\n",
    "### 4.1 - Load the SIGNS Dataset\n",
    "\n",
    "As a reminder, the SIGNS dataset is a collection of 6 signs representing numbers from 0 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the data (signs)\n",
    "X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_signs_dataset()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"images/SIGNS.png\" style=\"width:800px;height:300px;\">\n",
    "\n",
    "The next cell will show you an example of a labelled image in the dataset. Feel free to change the value of `index` below and re-run to see different examples. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 4\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of an image from the dataset\n",
    "index = 9\n",
    "plt.imshow(X_train_orig[index])\n",
    "print (\"y = \" + str(np.squeeze(Y_train_orig[:, index])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4-2'></a>\n",
    "### 4.2 - Split the Data into Train/Test Sets\n",
    "\n",
    "In Course 2, you built a fully-connected network for this dataset. But since this is an image dataset, it is more natural to apply a ConvNet to it.\n",
    "\n",
    "To get started, let's examine the shapes of your data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of training examples = 1080\n",
      "number of test examples = 120\n",
      "X_train shape: (1080, 64, 64, 3)\n",
      "Y_train shape: (1080, 6)\n",
      "X_test shape: (120, 64, 64, 3)\n",
      "Y_test shape: (120, 6)\n"
     ]
    }
   ],
   "source": [
    "X_train = X_train_orig/255.\n",
    "X_test = X_test_orig/255.\n",
    "Y_train = convert_to_one_hot(Y_train_orig, 6).T\n",
    "Y_test = convert_to_one_hot(Y_test_orig, 6).T\n",
    "print (\"number of training examples = \" + str(X_train.shape[0]))\n",
    "print (\"number of test examples = \" + str(X_test.shape[0]))\n",
    "print (\"X_train shape: \" + str(X_train.shape))\n",
    "print (\"Y_train shape: \" + str(Y_train.shape))\n",
    "print (\"X_test shape: \" + str(X_test.shape))\n",
    "print (\"Y_test shape: \" + str(Y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4-3'></a>\n",
    "### 4.3 - Forward Propagation\n",
    "\n",
    "In TensorFlow, there are built-in functions that implement the convolution steps for you. By now, you should be familiar with how TensorFlow builds computational graphs. In the [Functional API](https://www.tensorflow.org/guide/keras/functional), you create a graph of layers. This is what allows such great flexibility.\n",
    "\n",
    "However, the following model could also be defined using the Sequential API since the information flow is on a single line. But don't deviate. What we want you to learn is to use the functional API.\n",
    "\n",
    "Begin building your graph of layers by creating an input node that functions as a callable object:\n",
    "\n",
    "- **input_img = tf.keras.Input(shape=input_shape):** \n",
    "\n",
    "Then, create a new node in the graph of layers by calling a layer on the `input_img` object: \n",
    "\n",
    "- **tf.keras.layers.Conv2D(filters= ... , kernel_size= ... , padding='same')(input_img):** Read the full documentation on [Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D).\n",
    "\n",
    "- **tf.keras.layers.MaxPool2D(pool_size=(f, f), strides=(s, s), padding='same'):** `MaxPool2D()` downsamples your input using a window of size (f, f) and strides of size (s, s) to carry out max pooling over each window.  For max pooling, you usually operate on a single example at a time and a single channel at a time. Read the full documentation on [MaxPool2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D).\n",
    "\n",
    "- **tf.keras.layers.ReLU():** computes the elementwise ReLU of Z (which can be any shape). You can read the full documentation on [ReLU](https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU).\n",
    "\n",
    "- **tf.keras.layers.Flatten()**: given a tensor \"P\", this function takes each training (or test) example in the batch and flattens it into a 1D vector.  \n",
    "\n",
    "    * If a tensor P has the shape (batch_size,h,w,c), it returns a flattened tensor with shape (batch_size, k), where $k=h \\times w \\times c$.  \"k\" equals the product of all the dimension sizes other than the first dimension.\n",
    "    \n",
    "    * For example, given a tensor with dimensions [100, 2, 3, 4], it flattens the tensor to be of shape [100, 24], where 24 = 2 * 3 * 4.  You can read the full documentation on [Flatten](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Flatten).\n",
    "\n",
    "- **tf.keras.layers.Dense(units= ... , activation='softmax')(F):** given the flattened input F, it returns the output computed using a fully connected layer. You can read the full documentation on [Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense).\n",
    "\n",
    "In the last function above (`tf.keras.layers.Dense()`), the fully connected layer automatically initializes weights in the graph and keeps on training them as you train the model. Hence, you did not need to initialize those weights when initializing the parameters.\n",
    "\n",
    "Lastly, before creating the model, you'll need to define the output using the last of the function's compositions (in this example, a Dense layer): \n",
    "\n",
    "- **outputs = tf.keras.layers.Dense(units=6, activation='softmax')(F)**\n",
    "\n",
    "\n",
    "#### Window, kernel, filter, pool\n",
    "\n",
    "The words \"kernel\" and \"filter\" are used to refer to the same thing. The word \"filter\" accounts for the amount of \"kernels\" that will be used in a single convolution layer. \"Pool\" is the name of the operation that takes the max or average value of the kernels. \n",
    "\n",
    "This is why the parameter `pool_size` refers to `kernel_size`, and you use `(f,f)` to refer to the filter size. \n",
    "\n",
    "Pool size and kernel size refer to the same thing in different objects - They refer to the shape of the window where the operation takes place. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='ex-2'></a>\n",
    "### Exercise 2 - convolutional_model\n",
    "\n",
    "Implement the `convolutional_model` function below to build the following model: `CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> DENSE`. Use the functions above! \n",
    "\n",
    "Also, plug in the following parameters for all the steps:\n",
    "\n",
    " - [Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D): Use 8 4 by 4 filters, stride 1, padding is \"SAME\"\n",
    " - [ReLU](https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU)\n",
    " - [MaxPool2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D): Use an 8 by 8 filter size and an 8 by 8 stride, padding is \"SAME\"\n",
    " - **Conv2D**: Use 16 2 by 2 filters, stride 1, padding is \"SAME\"\n",
    " - **ReLU**\n",
    " - **MaxPool2D**: Use a 4 by 4 filter size and a 4 by 4 stride, padding is \"SAME\"\n",
    " - [Flatten](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Flatten) the previous output.\n",
    " - Fully-connected ([Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)) layer: Apply a fully connected layer with 6 neurons and a softmax activation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f58643806aa8380c96225fc8b4c5e7aa",
     "grade": false,
     "grade_id": "cell-dac51744a9e03f51",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: convolutional_model\n",
    "\n",
    "def convolutional_model(input_shape):\n",
    "    input_img = tf.keras.Input(shape=input_shape)\n",
    "    ## CONV2D: 8 filters 4x4, stride of 1, padding 'SAME'\n",
    "    Z1 = tf.keras.layers.Conv2D(8,4,strides=(1,1),padding =\"same\")(input_img)\n",
    "    ## RELU\n",
    "    A1 = tf.keras.layers.ReLU()(Z1)\n",
    "    ## MAXPOOL: window 8x8, stride 8, padding 'SAME'\n",
    "    P1 = tf.keras.layers.MaxPooling2D(8, strides=(8,8),padding=\"same\")(A1)\n",
    "    ## CONV2D: 16 filters 2x2, stride 1, padding 'SAME'\n",
    "    Z2 = tf.keras.layers.Conv2D(16,2, strides=(1,1),padding =\"same\")(P1)\n",
    "    ## RELU\n",
    "    A2 = tf.keras.layers.ReLU()(Z2)\n",
    "    ## MAXPOOL: window 4x4, stride 4, padding 'SAME'\n",
    "    P2 = tf.keras.layers.MaxPooling2D(4,strides=(4,4), padding=\"same\")(A2)\n",
    "    ## FLATTEN\n",
    "    F = tf.keras.layers.Flatten()(P2)\n",
    "    ## Dense layer\n",
    "    ## 6 neurons in output layer. Hint: one of the arguments should be \"activation='softmax'\" \n",
    "    outputs = tf.keras.layers.Dense(6, activation = \"softmax\")(F)\n",
    "    # YOUR CODE STARTS HERE\n",
    "    \n",
    "    \n",
    "    # YOUR CODE ENDS HERE\n",
    "    model = tf.keras.Model(inputs=input_img, outputs=outputs)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "483d626949930a0b0ef20997e7c6ba72",
     "grade": true,
     "grade_id": "cell-45d22e92042174c9",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"functional_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_1 (InputLayer)         [(None, 64, 64, 3)]       0         \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 64, 64, 8)         392       \n",
      "_________________________________________________________________\n",
      "re_lu_1 (ReLU)               (None, 64, 64, 8)         0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 8, 8, 8)           0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 8, 8, 16)          528       \n",
      "_________________________________________________________________\n",
      "re_lu_2 (ReLU)               (None, 8, 8, 16)          0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 2, 2, 16)          0         \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 6)                 390       \n",
      "=================================================================\n",
      "Total params: 1,310\n",
      "Trainable params: 1,310\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "\u001b[32mAll tests passed!\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "conv_model = convolutional_model((64, 64, 3))\n",
    "conv_model.compile(optimizer='adam',\n",
    "                  loss='categorical_crossentropy',\n",
    "                  metrics=['accuracy'])\n",
    "conv_model.summary()\n",
    "    \n",
    "output = [['InputLayer', [(None, 64, 64, 3)], 0],\n",
    "        ['Conv2D', (None, 64, 64, 8), 392, 'same', 'linear', 'GlorotUniform'],\n",
    "        ['ReLU', (None, 64, 64, 8), 0],\n",
    "        ['MaxPooling2D', (None, 8, 8, 8), 0, (8, 8), (8, 8), 'same'],\n",
    "        ['Conv2D', (None, 8, 8, 16), 528, 'same', 'linear', 'GlorotUniform'],\n",
    "        ['ReLU', (None, 8, 8, 16), 0],\n",
    "        ['MaxPooling2D', (None, 2, 2, 16), 0, (4, 4), (4, 4), 'same'],\n",
    "        ['Flatten', (None, 64), 0],\n",
    "        ['Dense', (None, 6), 390, 'softmax']]\n",
    "    \n",
    "comparator(summary(conv_model), output)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Both the Sequential and Functional APIs return a TF Keras model object. The only difference is how inputs are handled inside the object model! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4-4'></a>\n",
    "### 4.4 - Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.8053 - accuracy: 0.1574 - val_loss: 1.7936 - val_accuracy: 0.1000\n",
      "Epoch 2/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 1.7890 - accuracy: 0.1657 - val_loss: 1.7920 - val_accuracy: 0.1667\n",
      "Epoch 3/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.7850 - accuracy: 0.2093 - val_loss: 1.7902 - val_accuracy: 0.1833\n",
      "Epoch 4/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.7790 - accuracy: 0.2250 - val_loss: 1.7870 - val_accuracy: 0.1667\n",
      "Epoch 5/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.7710 - accuracy: 0.2435 - val_loss: 1.7823 - val_accuracy: 0.2000\n",
      "Epoch 6/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 1.7600 - accuracy: 0.2472 - val_loss: 1.7750 - val_accuracy: 0.1833\n",
      "Epoch 7/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 1.7432 - accuracy: 0.2694 - val_loss: 1.7607 - val_accuracy: 0.2417\n",
      "Epoch 8/100\n",
      "17/17 [==============================] - 2s 94ms/step - loss: 1.7201 - accuracy: 0.3213 - val_loss: 1.7446 - val_accuracy: 0.2917\n",
      "Epoch 9/100\n",
      "17/17 [==============================] - 2s 94ms/step - loss: 1.6898 - accuracy: 0.3611 - val_loss: 1.7236 - val_accuracy: 0.3000\n",
      "Epoch 10/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 1.6535 - accuracy: 0.3750 - val_loss: 1.6988 - val_accuracy: 0.3333\n",
      "Epoch 11/100\n",
      "17/17 [==============================] - 2s 94ms/step - loss: 1.6143 - accuracy: 0.3972 - val_loss: 1.6701 - val_accuracy: 0.3250\n",
      "Epoch 12/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 1.5721 - accuracy: 0.4120 - val_loss: 1.6383 - val_accuracy: 0.3667\n",
      "Epoch 13/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.5293 - accuracy: 0.4269 - val_loss: 1.6047 - val_accuracy: 0.3833\n",
      "Epoch 14/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.4879 - accuracy: 0.4407 - val_loss: 1.5716 - val_accuracy: 0.4083\n",
      "Epoch 15/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 1.4485 - accuracy: 0.4574 - val_loss: 1.5355 - val_accuracy: 0.4083\n",
      "Epoch 16/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 1.4130 - accuracy: 0.4602 - val_loss: 1.4953 - val_accuracy: 0.4167\n",
      "Epoch 17/100\n",
      "17/17 [==============================] - 2s 96ms/step - loss: 1.3769 - accuracy: 0.4806 - val_loss: 1.4639 - val_accuracy: 0.4167\n",
      "Epoch 18/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.3464 - accuracy: 0.4917 - val_loss: 1.4331 - val_accuracy: 0.4000\n",
      "Epoch 19/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 1.3140 - accuracy: 0.5056 - val_loss: 1.4058 - val_accuracy: 0.4333\n",
      "Epoch 20/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.2865 - accuracy: 0.5167 - val_loss: 1.3775 - val_accuracy: 0.4583\n",
      "Epoch 21/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.2583 - accuracy: 0.5306 - val_loss: 1.3503 - val_accuracy: 0.4750\n",
      "Epoch 22/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.2326 - accuracy: 0.5444 - val_loss: 1.3238 - val_accuracy: 0.4917\n",
      "Epoch 23/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 1.2088 - accuracy: 0.5630 - val_loss: 1.2981 - val_accuracy: 0.5083\n",
      "Epoch 24/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.1851 - accuracy: 0.5713 - val_loss: 1.2740 - val_accuracy: 0.5083\n",
      "Epoch 25/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.1627 - accuracy: 0.5787 - val_loss: 1.2540 - val_accuracy: 0.5167\n",
      "Epoch 26/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 1.1393 - accuracy: 0.5880 - val_loss: 1.2313 - val_accuracy: 0.5167\n",
      "Epoch 27/100\n",
      "17/17 [==============================] - 2s 96ms/step - loss: 1.1197 - accuracy: 0.6009 - val_loss: 1.2108 - val_accuracy: 0.5333\n",
      "Epoch 28/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.0961 - accuracy: 0.6083 - val_loss: 1.1871 - val_accuracy: 0.5333\n",
      "Epoch 29/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 1.0765 - accuracy: 0.6176 - val_loss: 1.1691 - val_accuracy: 0.5583\n",
      "Epoch 30/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 1.0559 - accuracy: 0.6241 - val_loss: 1.1480 - val_accuracy: 0.5750\n",
      "Epoch 31/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.0357 - accuracy: 0.6370 - val_loss: 1.1308 - val_accuracy: 0.6083\n",
      "Epoch 32/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 1.0147 - accuracy: 0.6435 - val_loss: 1.1069 - val_accuracy: 0.6000\n",
      "Epoch 33/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.9970 - accuracy: 0.6556 - val_loss: 1.0920 - val_accuracy: 0.6000\n",
      "Epoch 34/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.9787 - accuracy: 0.6630 - val_loss: 1.0714 - val_accuracy: 0.6000\n",
      "Epoch 35/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.9606 - accuracy: 0.6657 - val_loss: 1.0545 - val_accuracy: 0.6167\n",
      "Epoch 36/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.9435 - accuracy: 0.6694 - val_loss: 1.0368 - val_accuracy: 0.6417\n",
      "Epoch 37/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.9283 - accuracy: 0.6824 - val_loss: 1.0245 - val_accuracy: 0.6500\n",
      "Epoch 38/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.9124 - accuracy: 0.6870 - val_loss: 1.0041 - val_accuracy: 0.6500\n",
      "Epoch 39/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.8970 - accuracy: 0.6880 - val_loss: 0.9930 - val_accuracy: 0.6500\n",
      "Epoch 40/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.8844 - accuracy: 0.6954 - val_loss: 0.9774 - val_accuracy: 0.6500\n",
      "Epoch 41/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 0.8725 - accuracy: 0.7028 - val_loss: 0.9714 - val_accuracy: 0.6500\n",
      "Epoch 42/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.8598 - accuracy: 0.7000 - val_loss: 0.9571 - val_accuracy: 0.6500\n",
      "Epoch 43/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 0.8465 - accuracy: 0.7083 - val_loss: 0.9502 - val_accuracy: 0.6417\n",
      "Epoch 44/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 0.8353 - accuracy: 0.7056 - val_loss: 0.9354 - val_accuracy: 0.6417\n",
      "Epoch 45/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.8258 - accuracy: 0.7157 - val_loss: 0.9301 - val_accuracy: 0.6417\n",
      "Epoch 46/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 0.8160 - accuracy: 0.7167 - val_loss: 0.9171 - val_accuracy: 0.6500\n",
      "Epoch 47/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.8058 - accuracy: 0.7287 - val_loss: 0.9115 - val_accuracy: 0.6667\n",
      "Epoch 48/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7974 - accuracy: 0.7287 - val_loss: 0.9005 - val_accuracy: 0.6917\n",
      "Epoch 49/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.7874 - accuracy: 0.7333 - val_loss: 0.8953 - val_accuracy: 0.7000\n",
      "Epoch 50/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.7806 - accuracy: 0.7315 - val_loss: 0.8859 - val_accuracy: 0.7083\n",
      "Epoch 51/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7710 - accuracy: 0.7352 - val_loss: 0.8794 - val_accuracy: 0.7167\n",
      "Epoch 52/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7633 - accuracy: 0.7407 - val_loss: 0.8728 - val_accuracy: 0.7083\n",
      "Epoch 53/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7570 - accuracy: 0.7407 - val_loss: 0.8673 - val_accuracy: 0.7083\n",
      "Epoch 54/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7498 - accuracy: 0.7426 - val_loss: 0.8620 - val_accuracy: 0.7167\n",
      "Epoch 55/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.7430 - accuracy: 0.7481 - val_loss: 0.8568 - val_accuracy: 0.7167\n",
      "Epoch 56/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7366 - accuracy: 0.7454 - val_loss: 0.8502 - val_accuracy: 0.7333\n",
      "Epoch 57/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7312 - accuracy: 0.7463 - val_loss: 0.8416 - val_accuracy: 0.7167\n",
      "Epoch 58/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7237 - accuracy: 0.7481 - val_loss: 0.8371 - val_accuracy: 0.7250\n",
      "Epoch 59/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.7180 - accuracy: 0.7546 - val_loss: 0.8320 - val_accuracy: 0.7333\n",
      "Epoch 60/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7121 - accuracy: 0.7546 - val_loss: 0.8239 - val_accuracy: 0.7417\n",
      "Epoch 61/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.7066 - accuracy: 0.7620 - val_loss: 0.8219 - val_accuracy: 0.7333\n",
      "Epoch 62/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.7009 - accuracy: 0.7667 - val_loss: 0.8171 - val_accuracy: 0.7500\n",
      "Epoch 63/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6956 - accuracy: 0.7648 - val_loss: 0.8088 - val_accuracy: 0.7500\n",
      "Epoch 64/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.6895 - accuracy: 0.7713 - val_loss: 0.8039 - val_accuracy: 0.7333\n",
      "Epoch 65/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6819 - accuracy: 0.7741 - val_loss: 0.7986 - val_accuracy: 0.7333\n",
      "Epoch 66/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6767 - accuracy: 0.7769 - val_loss: 0.7934 - val_accuracy: 0.7417\n",
      "Epoch 67/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.6721 - accuracy: 0.7787 - val_loss: 0.7900 - val_accuracy: 0.7333\n",
      "Epoch 68/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.6680 - accuracy: 0.7815 - val_loss: 0.7853 - val_accuracy: 0.7333\n",
      "Epoch 69/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6626 - accuracy: 0.7787 - val_loss: 0.7837 - val_accuracy: 0.7417\n",
      "Epoch 70/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6590 - accuracy: 0.7852 - val_loss: 0.7777 - val_accuracy: 0.7333\n",
      "Epoch 71/100\n",
      "17/17 [==============================] - 2s 95ms/step - loss: 0.6545 - accuracy: 0.7824 - val_loss: 0.7757 - val_accuracy: 0.7500\n",
      "Epoch 72/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6507 - accuracy: 0.7843 - val_loss: 0.7705 - val_accuracy: 0.7500\n",
      "Epoch 73/100\n",
      "17/17 [==============================] - 2s 94ms/step - loss: 0.6462 - accuracy: 0.7889 - val_loss: 0.7683 - val_accuracy: 0.7417\n",
      "Epoch 74/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.6415 - accuracy: 0.7870 - val_loss: 0.7628 - val_accuracy: 0.7500\n",
      "Epoch 75/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6367 - accuracy: 0.7889 - val_loss: 0.7614 - val_accuracy: 0.7417\n",
      "Epoch 76/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6329 - accuracy: 0.7898 - val_loss: 0.7561 - val_accuracy: 0.7583\n",
      "Epoch 77/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6283 - accuracy: 0.7898 - val_loss: 0.7512 - val_accuracy: 0.7500\n",
      "Epoch 78/100\n",
      "17/17 [==============================] - 2s 96ms/step - loss: 0.6230 - accuracy: 0.7954 - val_loss: 0.7476 - val_accuracy: 0.7500\n",
      "Epoch 79/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6181 - accuracy: 0.7981 - val_loss: 0.7436 - val_accuracy: 0.7500\n",
      "Epoch 80/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.6139 - accuracy: 0.8000 - val_loss: 0.7404 - val_accuracy: 0.7417\n",
      "Epoch 81/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6113 - accuracy: 0.8009 - val_loss: 0.7374 - val_accuracy: 0.7583\n",
      "Epoch 82/100\n",
      "17/17 [==============================] - 2s 99ms/step - loss: 0.6080 - accuracy: 0.8046 - val_loss: 0.7351 - val_accuracy: 0.7500\n",
      "Epoch 83/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6048 - accuracy: 0.8037 - val_loss: 0.7321 - val_accuracy: 0.7500\n",
      "Epoch 84/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6016 - accuracy: 0.8019 - val_loss: 0.7321 - val_accuracy: 0.7500\n",
      "Epoch 85/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5987 - accuracy: 0.8046 - val_loss: 0.7274 - val_accuracy: 0.7500\n",
      "Epoch 86/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5946 - accuracy: 0.8074 - val_loss: 0.7230 - val_accuracy: 0.7500\n",
      "Epoch 87/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5882 - accuracy: 0.8093 - val_loss: 0.7191 - val_accuracy: 0.7500\n",
      "Epoch 88/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5847 - accuracy: 0.8139 - val_loss: 0.7162 - val_accuracy: 0.7500\n",
      "Epoch 89/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5813 - accuracy: 0.8102 - val_loss: 0.7131 - val_accuracy: 0.7500\n",
      "Epoch 90/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5773 - accuracy: 0.8139 - val_loss: 0.7103 - val_accuracy: 0.7500\n",
      "Epoch 91/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5748 - accuracy: 0.8130 - val_loss: 0.7081 - val_accuracy: 0.7583\n",
      "Epoch 92/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5714 - accuracy: 0.8139 - val_loss: 0.7053 - val_accuracy: 0.7583\n",
      "Epoch 93/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5674 - accuracy: 0.8157 - val_loss: 0.7023 - val_accuracy: 0.7500\n",
      "Epoch 94/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5640 - accuracy: 0.8176 - val_loss: 0.6991 - val_accuracy: 0.7500\n",
      "Epoch 95/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5600 - accuracy: 0.8194 - val_loss: 0.6969 - val_accuracy: 0.7500\n",
      "Epoch 96/100\n",
      "17/17 [==============================] - 2s 96ms/step - loss: 0.5576 - accuracy: 0.8231 - val_loss: 0.6949 - val_accuracy: 0.7500\n",
      "Epoch 97/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5540 - accuracy: 0.8241 - val_loss: 0.6928 - val_accuracy: 0.7500\n",
      "Epoch 98/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5509 - accuracy: 0.8222 - val_loss: 0.6904 - val_accuracy: 0.7500\n",
      "Epoch 99/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5478 - accuracy: 0.8222 - val_loss: 0.6881 - val_accuracy: 0.7500\n",
      "Epoch 100/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.5445 - accuracy: 0.8213 - val_loss: 0.6861 - val_accuracy: 0.7500\n"
     ]
    }
   ],
   "source": [
    "train_dataset = tf.data.Dataset.from_tensor_slices((X_train, Y_train)).batch(64)\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((X_test, Y_test)).batch(64)\n",
    "history = conv_model.fit(train_dataset, epochs=100, validation_data=test_dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='5'></a>\n",
    "## 5 - History Object \n",
    "\n",
    "The history object is an output of the `.fit()` operation, and provides a record of all the loss and metric values in memory. It's stored as a dictionary that you can retrieve at `history.history`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'loss': [1.8052946329116821,\n",
       "  1.789014220237732,\n",
       "  1.784972071647644,\n",
       "  1.779032588005066,\n",
       "  1.7710152864456177,\n",
       "  1.7599605321884155,\n",
       "  1.7431772947311401,\n",
       "  1.720085620880127,\n",
       "  1.6897704601287842,\n",
       "  1.653529405593872,\n",
       "  1.6143078804016113,\n",
       "  1.572067141532898,\n",
       "  1.5293363332748413,\n",
       "  1.4878548383712769,\n",
       "  1.4484925270080566,\n",
       "  1.412959337234497,\n",
       "  1.3768763542175293,\n",
       "  1.346359133720398,\n",
       "  1.3139996528625488,\n",
       "  1.2865443229675293,\n",
       "  1.2582672834396362,\n",
       "  1.2326287031173706,\n",
       "  1.2087581157684326,\n",
       "  1.1850793361663818,\n",
       "  1.162688136100769,\n",
       "  1.1392531394958496,\n",
       "  1.1197235584259033,\n",
       "  1.0961415767669678,\n",
       "  1.0765409469604492,\n",
       "  1.0559108257293701,\n",
       "  1.0357410907745361,\n",
       "  1.0147433280944824,\n",
       "  0.9970242977142334,\n",
       "  0.9787046313285828,\n",
       "  0.9606236219406128,\n",
       "  0.9434670805931091,\n",
       "  0.9282608032226562,\n",
       "  0.912433922290802,\n",
       "  0.8969974517822266,\n",
       "  0.8843843340873718,\n",
       "  0.8725285530090332,\n",
       "  0.8597738742828369,\n",
       "  0.8464569449424744,\n",
       "  0.8353235125541687,\n",
       "  0.825843870639801,\n",
       "  0.8159646987915039,\n",
       "  0.8058058023452759,\n",
       "  0.7974494695663452,\n",
       "  0.7874190211296082,\n",
       "  0.7806076407432556,\n",
       "  0.7710137963294983,\n",
       "  0.7633269429206848,\n",
       "  0.7569655776023865,\n",
       "  0.7497674822807312,\n",
       "  0.7429815530776978,\n",
       "  0.7366225719451904,\n",
       "  0.731176495552063,\n",
       "  0.7237014770507812,\n",
       "  0.7179851531982422,\n",
       "  0.7121186852455139,\n",
       "  0.706617534160614,\n",
       "  0.700905442237854,\n",
       "  0.6955716013908386,\n",
       "  0.689542829990387,\n",
       "  0.6819026470184326,\n",
       "  0.6766812205314636,\n",
       "  0.6721122860908508,\n",
       "  0.6679980158805847,\n",
       "  0.6625689268112183,\n",
       "  0.6590140461921692,\n",
       "  0.6545308232307434,\n",
       "  0.6506531834602356,\n",
       "  0.6461529731750488,\n",
       "  0.6414947509765625,\n",
       "  0.6367038488388062,\n",
       "  0.6329158544540405,\n",
       "  0.6283155679702759,\n",
       "  0.6230148077011108,\n",
       "  0.6181057691574097,\n",
       "  0.613860547542572,\n",
       "  0.6113119125366211,\n",
       "  0.6080414056777954,\n",
       "  0.6047658324241638,\n",
       "  0.6015710830688477,\n",
       "  0.598685085773468,\n",
       "  0.5945507287979126,\n",
       "  0.5881632566452026,\n",
       "  0.5846730470657349,\n",
       "  0.5813219547271729,\n",
       "  0.5772711634635925,\n",
       "  0.574798047542572,\n",
       "  0.5714000463485718,\n",
       "  0.567434549331665,\n",
       "  0.564038097858429,\n",
       "  0.5599793791770935,\n",
       "  0.5576253533363342,\n",
       "  0.5539582967758179,\n",
       "  0.5508962273597717,\n",
       "  0.5478024482727051,\n",
       "  0.5445162057876587],\n",
       " 'accuracy': [0.15740740299224854,\n",
       "  0.1657407432794571,\n",
       "  0.2092592567205429,\n",
       "  0.22499999403953552,\n",
       "  0.24351851642131805,\n",
       "  0.24722221493721008,\n",
       "  0.26944443583488464,\n",
       "  0.3212963044643402,\n",
       "  0.3611111044883728,\n",
       "  0.375,\n",
       "  0.39722222089767456,\n",
       "  0.41203704476356506,\n",
       "  0.4268518388271332,\n",
       "  0.4407407343387604,\n",
       "  0.4574074149131775,\n",
       "  0.4601851999759674,\n",
       "  0.48055556416511536,\n",
       "  0.49166667461395264,\n",
       "  0.5055555701255798,\n",
       "  0.5166666507720947,\n",
       "  0.5305555462837219,\n",
       "  0.5444444417953491,\n",
       "  0.5629629492759705,\n",
       "  0.5712962746620178,\n",
       "  0.5787037014961243,\n",
       "  0.5879629850387573,\n",
       "  0.6009259223937988,\n",
       "  0.6083333492279053,\n",
       "  0.6175925731658936,\n",
       "  0.6240741014480591,\n",
       "  0.6370370388031006,\n",
       "  0.6435185074806213,\n",
       "  0.6555555462837219,\n",
       "  0.6629629731178284,\n",
       "  0.6657407283782959,\n",
       "  0.6694444417953491,\n",
       "  0.6824073791503906,\n",
       "  0.6870370507240295,\n",
       "  0.6879629492759705,\n",
       "  0.6953703761100769,\n",
       "  0.7027778029441833,\n",
       "  0.699999988079071,\n",
       "  0.7083333134651184,\n",
       "  0.7055555582046509,\n",
       "  0.7157407402992249,\n",
       "  0.7166666388511658,\n",
       "  0.7287036776542664,\n",
       "  0.7287036776542664,\n",
       "  0.7333333492279053,\n",
       "  0.7314814925193787,\n",
       "  0.7351852059364319,\n",
       "  0.7407407164573669,\n",
       "  0.7407407164573669,\n",
       "  0.7425925731658936,\n",
       "  0.7481481432914734,\n",
       "  0.7453703880310059,\n",
       "  0.7462962865829468,\n",
       "  0.7481481432914734,\n",
       "  0.7546296119689941,\n",
       "  0.7546296119689941,\n",
       "  0.7620370388031006,\n",
       "  0.7666666507720947,\n",
       "  0.7648147940635681,\n",
       "  0.7712963223457336,\n",
       "  0.7740740776062012,\n",
       "  0.7768518328666687,\n",
       "  0.7787036895751953,\n",
       "  0.7814815044403076,\n",
       "  0.7787036895751953,\n",
       "  0.7851851582527161,\n",
       "  0.7824074029922485,\n",
       "  0.7842592597007751,\n",
       "  0.7888888716697693,\n",
       "  0.7870370149612427,\n",
       "  0.7888888716697693,\n",
       "  0.789814829826355,\n",
       "  0.789814829826355,\n",
       "  0.7953703999519348,\n",
       "  0.7981481552124023,\n",
       "  0.800000011920929,\n",
       "  0.8009259104728699,\n",
       "  0.8046296238899231,\n",
       "  0.8037037253379822,\n",
       "  0.8018518686294556,\n",
       "  0.8046296238899231,\n",
       "  0.8074073791503906,\n",
       "  0.8092592358589172,\n",
       "  0.8138889074325562,\n",
       "  0.8101851940155029,\n",
       "  0.8138889074325562,\n",
       "  0.8129629492759705,\n",
       "  0.8138889074325562,\n",
       "  0.8157407641410828,\n",
       "  0.8175926208496094,\n",
       "  0.8194444179534912,\n",
       "  0.8231481313705444,\n",
       "  0.8240740895271301,\n",
       "  0.8222222328186035,\n",
       "  0.8222222328186035,\n",
       "  0.8212962746620178],\n",
       " 'val_loss': [1.7935606241226196,\n",
       "  1.7919554710388184,\n",
       "  1.7902098894119263,\n",
       "  1.787047028541565,\n",
       "  1.7822808027267456,\n",
       "  1.7750091552734375,\n",
       "  1.760701298713684,\n",
       "  1.744624376296997,\n",
       "  1.7236170768737793,\n",
       "  1.6987544298171997,\n",
       "  1.670136570930481,\n",
       "  1.6382553577423096,\n",
       "  1.604733943939209,\n",
       "  1.571570634841919,\n",
       "  1.535452127456665,\n",
       "  1.4953399896621704,\n",
       "  1.4638808965682983,\n",
       "  1.4331047534942627,\n",
       "  1.405820608139038,\n",
       "  1.3774842023849487,\n",
       "  1.3502627611160278,\n",
       "  1.3238309621810913,\n",
       "  1.2981421947479248,\n",
       "  1.2739520072937012,\n",
       "  1.2540262937545776,\n",
       "  1.231316328048706,\n",
       "  1.2108330726623535,\n",
       "  1.1871135234832764,\n",
       "  1.1690542697906494,\n",
       "  1.1479575634002686,\n",
       "  1.1307752132415771,\n",
       "  1.1069004535675049,\n",
       "  1.0919708013534546,\n",
       "  1.0714110136032104,\n",
       "  1.0545350313186646,\n",
       "  1.0368149280548096,\n",
       "  1.0245013236999512,\n",
       "  1.004052758216858,\n",
       "  0.9929739832878113,\n",
       "  0.977401852607727,\n",
       "  0.9713723063468933,\n",
       "  0.9570705890655518,\n",
       "  0.9501760601997375,\n",
       "  0.9354099035263062,\n",
       "  0.9300925135612488,\n",
       "  0.9170856475830078,\n",
       "  0.9114608764648438,\n",
       "  0.9004899859428406,\n",
       "  0.895266592502594,\n",
       "  0.8859275579452515,\n",
       "  0.8794184327125549,\n",
       "  0.8728463649749756,\n",
       "  0.8672975897789001,\n",
       "  0.8619987368583679,\n",
       "  0.8568436503410339,\n",
       "  0.8502457737922668,\n",
       "  0.8416280150413513,\n",
       "  0.8370726704597473,\n",
       "  0.8319670557975769,\n",
       "  0.8238630890846252,\n",
       "  0.8218911290168762,\n",
       "  0.8171353936195374,\n",
       "  0.8088362216949463,\n",
       "  0.8038806915283203,\n",
       "  0.7986258268356323,\n",
       "  0.7933700680732727,\n",
       "  0.7900400757789612,\n",
       "  0.7853270173072815,\n",
       "  0.7837324738502502,\n",
       "  0.7777117490768433,\n",
       "  0.7756521105766296,\n",
       "  0.7705143094062805,\n",
       "  0.7682996988296509,\n",
       "  0.762812077999115,\n",
       "  0.7613966464996338,\n",
       "  0.7560868859291077,\n",
       "  0.7512081861495972,\n",
       "  0.7476099133491516,\n",
       "  0.7435786128044128,\n",
       "  0.7403891086578369,\n",
       "  0.7374162077903748,\n",
       "  0.7351070642471313,\n",
       "  0.7320830821990967,\n",
       "  0.7321395874023438,\n",
       "  0.7274008989334106,\n",
       "  0.7229699492454529,\n",
       "  0.7190542817115784,\n",
       "  0.7161738276481628,\n",
       "  0.7131115198135376,\n",
       "  0.7102838158607483,\n",
       "  0.7080516219139099,\n",
       "  0.7052648663520813,\n",
       "  0.7023434042930603,\n",
       "  0.6991135478019714,\n",
       "  0.6968777775764465,\n",
       "  0.6948804259300232,\n",
       "  0.692823588848114,\n",
       "  0.6904280185699463,\n",
       "  0.688119113445282,\n",
       "  0.6860655546188354],\n",
       " 'val_accuracy': [0.10000000149011612,\n",
       "  0.1666666716337204,\n",
       "  0.18333333730697632,\n",
       "  0.1666666716337204,\n",
       "  0.20000000298023224,\n",
       "  0.18333333730697632,\n",
       "  0.24166665971279144,\n",
       "  0.2916666567325592,\n",
       "  0.30000001192092896,\n",
       "  0.3333333432674408,\n",
       "  0.32499998807907104,\n",
       "  0.36666667461395264,\n",
       "  0.38333332538604736,\n",
       "  0.40833333134651184,\n",
       "  0.40833333134651184,\n",
       "  0.4166666567325592,\n",
       "  0.4166666567325592,\n",
       "  0.4000000059604645,\n",
       "  0.4333333373069763,\n",
       "  0.4583333432674408,\n",
       "  0.4749999940395355,\n",
       "  0.49166667461395264,\n",
       "  0.5083333253860474,\n",
       "  0.5083333253860474,\n",
       "  0.5166666507720947,\n",
       "  0.5166666507720947,\n",
       "  0.5333333611488342,\n",
       "  0.5333333611488342,\n",
       "  0.5583333373069763,\n",
       "  0.574999988079071,\n",
       "  0.6083333492279053,\n",
       "  0.6000000238418579,\n",
       "  0.6000000238418579,\n",
       "  0.6000000238418579,\n",
       "  0.6166666746139526,\n",
       "  0.6416666507720947,\n",
       "  0.6499999761581421,\n",
       "  0.6499999761581421,\n",
       "  0.6499999761581421,\n",
       "  0.6499999761581421,\n",
       "  0.6499999761581421,\n",
       "  0.6499999761581421,\n",
       "  0.6416666507720947,\n",
       "  0.6416666507720947,\n",
       "  0.6416666507720947,\n",
       "  0.6499999761581421,\n",
       "  0.6666666865348816,\n",
       "  0.6916666626930237,\n",
       "  0.699999988079071,\n",
       "  0.7083333134651184,\n",
       "  0.7166666388511658,\n",
       "  0.7083333134651184,\n",
       "  0.7083333134651184,\n",
       "  0.7166666388511658,\n",
       "  0.7166666388511658,\n",
       "  0.7333333492279053,\n",
       "  0.7166666388511658,\n",
       "  0.7250000238418579,\n",
       "  0.7333333492279053,\n",
       "  0.7416666746139526,\n",
       "  0.7333333492279053,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.7333333492279053,\n",
       "  0.7333333492279053,\n",
       "  0.7416666746139526,\n",
       "  0.7333333492279053,\n",
       "  0.7333333492279053,\n",
       "  0.7416666746139526,\n",
       "  0.7333333492279053,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.7416666746139526,\n",
       "  0.75,\n",
       "  0.7416666746139526,\n",
       "  0.7583333253860474,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.7416666746139526,\n",
       "  0.7583333253860474,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.7583333253860474,\n",
       "  0.7583333253860474,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75]}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history.history"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now visualize the loss over time using `history.history`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0.5, 'Accuracy'), Text(0.5, 0, 'Epoch')]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The history.history[\"loss\"] entry is a dictionary with as many values as epochs that the\n",
    "# model was trained on. \n",
    "df_loss_acc = pd.DataFrame(history.history)\n",
    "df_loss= df_loss_acc[['loss','val_loss']]\n",
    "df_loss.rename(columns={'loss':'train','val_loss':'validation'},inplace=True)\n",
    "df_acc= df_loss_acc[['accuracy','val_accuracy']]\n",
    "df_acc.rename(columns={'accuracy':'train','val_accuracy':'validation'},inplace=True)\n",
    "df_loss.plot(title='Model loss',figsize=(12,8)).set(xlabel='Epoch',ylabel='Loss')\n",
    "df_acc.plot(title='Model Accuracy',figsize=(12,8)).set(xlabel='Epoch',ylabel='Accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Congratulations**! You've finished the assignment and built two models: One that recognizes  smiles, and another that recognizes SIGN language with almost 80% accuracy on the test set. In addition to that, you now also understand the applications of two Keras APIs: Sequential and Functional. Nicely done! \n",
    "\n",
    "By now, you know a bit about how the Functional API works and may have glimpsed the possibilities. In your next assignment, you'll really get a feel for its power when you get the opportunity to build a very deep ConvNet, using ResNets! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='6'></a>\n",
    "## 6 - Bibliography\n",
    "\n",
    "You're always encouraged to read the official documentation. To that end, you can find the docs for the Sequential and Functional APIs here: \n",
    "\n",
    "https://www.tensorflow.org/guide/keras/sequential_model\n",
    "\n",
    "https://www.tensorflow.org/guide/keras/functional"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "convolutional-neural-networks",
   "graded_item_id": "bwbJV",
   "launcher_item_id": "0TkXB"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
